##https://github.com/telosys-templates

## --------------------------------------------------
#if ( $entity.isJoinEntity() )
#cancel("No JPA class for join entity")
#end
#if ($target.outputFileExists())
#cancel("File exists")
#end
## --------------------------------------------------
#checkId($entity)
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")
##---------------------------------------------------------------------------------------
##                 JPA CONFIGURATION
##---------------------------------------------------------------------------------------
## Define the default collection type to be used (default is "java.util.List" )
#set($env.collectionType = "java.util.Set")
## #set($env.collectionType = "java.util.Collection")
## ---------------------------
## Define if "targetEntity" must be generated in @ManyToMany or @OneToMany
## #set($jpa.genTargetEntity = true)
## ---------------------------
## Define default value (true or false) for "insertable" and "updatable" in "@JoinColumn"
#set($jpa.joinColumnInsertable = true) 
#set($jpa.joinColumnUpdatable  = true)
## ---------------------------
## Set default FETCH-TYPE for each cardinality ( "LAZY" or "EAGER" )
#set($jpa.manyToOneFetchType  = "LAZY" )
#set($jpa.oneToOneFetchType   = "LAZY" )
#set($jpa.oneToManyFetchType  = "LAZY" )
#set($jpa.manyToManyFetchType = "LAZY" )
##---------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};
##Criar aspas duplas
#set($Q = '"')
## IF ENTITY HAS A COMPOSITE PRIMARY KEY => GENERATE AN 'ID CLASS' FOR THIS PRIMARY KEY
#if ( $entity.hasCompositePrimaryKey() )
$generator.generate($target.entityName ,  "${jpaEntityIdClass}.java", $target.folder, "main-java/XxxJpaEntityId_java.vm" )
#end

## Recupera os atributos não nulos
#set($nonNullAttributes = [])
#foreach ($attribute in $entity.nonKeyAttributes)
    #if ($attribute.name.contains('idSituacao'))
    #elseif ($attribute.isNotBlank() || $attribute.isNotNull() || $attribute.isNotEmpty() || !$attributes.minLength.equals(''))
      #if ($nonNullAttributes.add($attribute))
      #end
    #end
#end
## Recupera os atributos de update
#set($updateAttributes = [])
#foreach ($attribute in $nonNullAttributes)
    #if ($attribute.hasTag('web') && $attribute.tagValue('web').contains('put'))
      #if ($updateAttributes.add($attribute))
      #end
    #end
#end
## Verifica se tem situacao de atributo
#set($existsIdSituacao = false)
#foreach ($attribute in $entity.nonKeyAttributes)
    #if ($attribute.name.contains('idSituacao'))
      #set($existsIdSituacao = true)
    #end
#end
## Recupera os atributos de type
#set($typeAttributes = [])
#foreach ($attribute in $entity.nonKeyAttributes)
    #if ($attribute.hasTag('typeValues'))
      #if ($typeAttributes.add($attribute))
      #end
    #end
#end
##Criar os types e os converters
#foreach ($attribute in $typeAttributes)
#set($typeFolder = "${target.folder}/types")
#set($enumAttributeName = $attribute.name)
  #if (!$attribute.name.contains('idSituacao'))
    $generator.generate($target.entityName , "${attribute.name.replace('id', '')}Type.java", $typeFolder, "entity/enum_template.vm")
    $generator.generate($target.entityName , "${attribute.name.replace('id', '')}Converter.java", $typeFolder, "entity/enum_converter_template.vm")
  #end
#end
################ macros ############################
## Macro criacao sequence
#macro(sequence)
  #set($sqName = $entity.name)
  #if(!$entity.databaseTable.equals(''))
  	#set($sqName = $entity.databaseTable)  
  #end  	
  @SequenceGenerator(name = "$sqName", sequenceName = "${sqName}_sq", allocationSize = 1)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "${sqName}")
#end
## macro para getter e setter dos atributo
#macro(getterSetter $attribute)
  #if($attribute.hasTag('web') )
    #if ( $attribute.tagValue('web').contains('pesquisar') || $attribute.tagValue('web').contains('get') )
  @Getter
    #end
    #if (!($attribute.isNotBlank() || $attribute.isNotNull() || $attribute.isNotEmpty()) )
  @Setter 
    #end
  #end
#end
## macro para criacao da mensagems de anotacoes nos atributo
#macro(message $attribute)
  #set($message = "${attribute.tagValue('mensagem')}")
  #if ( $beanValidation.annotationsForWrapperType( 4, $attribute ).contains(')') )
  $beanValidation.annotationsForWrapperType( 4, $attribute ).replace(')', ", message=$Q$message$Q)")
  #elseif (!$beanValidation.annotationsForWrapperType( 4, $attribute ).equals(''))
  $beanValidation.annotationsForWrapperType( 4, $attribute )(message=$Q$message$Q)
  #end    
#end
## macro de parametro type
#macro(parameterType $attr)
#if($attribute.hasTag('typeValues'))$attribute.name.replace('id', '')Type #elseif($attribute.isFK())${attribute.referencedEntityName}Entity #else$attribute.formattedWrapperType(0)#end
#end
## macro de parametro name
#macro(parameterName $attr)
#if($attribute.isFK())$attribute.name.replace('cd', '').substring(0).toLowerCase()#else$attribute.name#end
#end
## macro de parametro de metodos
#macro(printParameters $parameters)
  #foreach ($attribute in $parameters)
#parameterType($attribute) #parameterName($attribute)#if(!$foreach.last), #end
  #end
#end
## macro de parametro de atribuicoes
#macro(assignments $parameters)
#foreach ($attribute in $parameters)
#if($attribute.isFK())
this.$attribute.name.replace('cd', '').substring(0).toLowerCase() = $attribute.name.replace('cd', '').substring(0).toLowerCase();
#else
this.$attribute.name = $attribute.name;
#end
#end
#end
##recupera os atributos obrigatorios de mapemaento do construtor
#set($nonNullAttributesMap = [])
#foreach( $link in $entity.links )
  #if($link.hasTag('NotNull') && $link.hasTag('cascade') && $link.isCardinalityOneToOne())
    #foreach($attribute in $link.targetEntity.nonKeyAttributes)
     #if ($attribute.name.contains('idSituacao'))
     #elseif ($attribute.isNotBlank() || $attribute.isNotNull() || $attribute.isNotEmpty())
      #if (!$nonNullAttributesMap.contains($attribute) && $nonNullAttributesMap.add($attribute))
      #end
     #end
    #end
  #end
#end
## Macro para adicionar atributos de mapeamento no construtor
#macro(mapeamentoContrutor)
#foreach( $link in $entity.links )
 #if($link.hasTag('NotNull') && $link.hasTag('cascade') && $link.isCardinalityOneToOne() && !$nonNullAttributesMap.isEmpty())
, #printParameters($nonNullAttributesMap) #break
 #elseif($link.hasTag('NotNull') && $link.isCardinalityOneToOne())
  , ${link.targetEntity}Entity $link.fieldName
 #end
#end
#end
##macro para atribuicoes no construtor
#macro(mapeamentoAtribuicaoContrutor)
#foreach( $link in $entity.links )
 #if($link.hasTag('NotNull') && $link.hasTag('cascade') && $link.isCardinalityOneToOne() && !$nonNullAttributesMap.isEmpty())
	this.$link.fieldName = new ${link.targetEntity}Entity(#foreach($attribute in $nonNullAttributesMap)$attribute.name#end, this);	
 #elseif($link.hasTag('NotNull') && $link.isCardinalityOneToOne())
  this.$link.fieldName = $link.fieldName;#end
#end
#end

##criar get e add para coolections
#macro(acessorsCollection)
  #foreach( $link in $entity.links )
    #if($link.cardinality.toString().equals('OneToMany'))
		#set($entitySimpleType = ${link.targetEntitySimpleType}  + 'Entity')
		#set($atributteEnityName = $link.targetEntitySimpleType.substring(0,1).toLowerCase() + $link.targetEntitySimpleType.substring(1))
        #set($atributteCollectionName = $link.formattedFieldType(0).replace($link.targetEntitySimpleType, $entitySimpleType))
      public ${entity.name}Entity add($entitySimpleType $atributteEnityName) {
        ${link.fieldName}.add($atributteEnityName);
        return this;
      }
	
      public $atributteCollectionName ${link.getter}() {
         return Collections.unmodifiableSet(this.$link.fieldName);
	  }

    #end
  #end
#end
################ fim macros ############################
## INicia os imports genericos
import java.io.Serializable;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import br.org.curitiba.ici.saude.*;
import ${ROOT_PKG}.*;
import java.util.Collections;

#if ($existsIdSituacao)
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;
#end
#foreach( $import in $java.imports($entity) )
import $import;
#end
#foreach( $import in $jpa.imports($entity) )
import $import;
#end
## fim dos imports
## Inicio da criação da entidade
##insere o softdelete
#if ($existsIdSituacao)
@Where(clause = " idSituacao <> 0 ")
@SQLDelete(sql = "UPDATE ${entity.name} SET idSituacao = 0 WHERE cd${entity.name} = ? ")
#end
@Accessors(chain = true)
#if (!$nonNullAttributes.isEmpty() || !$existsIdSituacao)
@NoArgsConstructor(access = AccessLevel.PROTECTED)
#end
$jpa.entityAnnotations(0, $entity)
public class ${entity.name}Entity implements Serializable {
  private static final long serialVersionUID = 1L;
##Criar a PK
   @Getter
#foreach( $attribute in $entity.keyAttributes )
   $jpa.fieldAnnotations(2, $attribute)
   #sequence private $attribute.formattedWrapperType(10) $attribute.name #if($attribute.hasInitialValue())= ${attribute.ini} #end;
#end

##Cria os outros atributos     
#foreach( $attribute in $entity.nonKeyAttributes )
  ## so imprimir o atrbuto se não for uma FK
  
  #if($attribute.name.contains('idSituacao'))
  @NotNull(message = "Situação")
  @Convert(converter = SituacaoConverter.class)
  private SituacaoType idSituacao;
  #elseif (!$attribute.isFK())
   #getterSetter($attribute)    
   #message($attribute)
    #if	( $attribute.hasTag('typeValues') )
  #set($nameType = $attribute.name.replace('id', ''))
  @Convert(converter = ${nameType}Converter.class)
  private ${nameType}Type $attribute.name; 
    #else
  private $attribute.formattedWrapperType(10) $attribute.name;
    #end
  #end
#end

#foreach( $link in $entity.links )
## all annotations : Cardinality, JoinColumn(s), etc
##--- with "insertable=false, updatable=false" if attribute already mapped
##$jpa.linkAnnotations(4, $link, $entity.attributes)
##--- no "insertable=false, updatable=false" if already mapped
##$jpa.linkAnnotations(4, $link)
##$jpa.linkAnnotations(4, $link)
##--- Just @Cardinality annotation
##$jpa.linkCardinalityAnnotation(4, $link)
##$jpa.linkCardinalityAnnotation(4, $link) 
##--- Just @JoinColumn(s) annotation(s)
##$jpa.linkJoinAnnotation(4, $link)
##$jpa.linkJoinAnnotation(4, $link) 
##$jpa.linkJoinAnnotation(4, $link, $entity.attributes)
##$jpa.linkJoinAnnotation(4, $link, $entity.attributes)
##, cascade = CascadeType.ALL)
#set($mapperAnnotation = $jpa.linkAnnotations(4, $link))
#if($link.hasTag('cascade'))
  #set($cascadeType = ', cascade = CascadeType.cascadeType)' )
  #set($cascadeType = $cascadeType.replace('cascadeType', $link.tagValue('cascade')) )
  #set($mapperAnnotation = $mapperAnnotation.replace(')', $cascadeType))
#end
#if($link.hasTag('NotNull'))
	#set($message = "${link.tagValue('mensagem')}")
	@NotNull(message=$fn.quote($message))
#end
#foreach ($attribute in $entity.nonKeyAttributes)
  #if($attribute.isFK())
	#if ($attribute.referencedEntityName.equals(${link.targetEntitySimpleType}))
  #getterSetter($attribute)  
  #message($attribute) 
    #end
  #end
#end
#set($entitySimpleType = ${link.targetEntitySimpleType}  + 'Entity')
#set($atributteEnityName = $link.formattedFieldType(0).replace($link.targetEntitySimpleType, $entitySimpleType))
  $mapperAnnotation
  private ${atributteEnityName} $link.fieldName ; 
#end
##fim for each mappeamentos

## Gerar o construtor
  public ${entity.name}Entity (#printParameters($nonNullAttributes)#mapeamentoContrutor){
#assignments($nonNullAttributes)#mapeamentoAtribuicaoContrutor
#if ($existsIdSituacao)this.idSituacao = SituacaoType.ATIVO;#end
  }

## gera o metodo de update
#if (!$updateAttributes.isEmpty())
  public ${entity.name}Entity atualizar(#printParameters($nonNullAttributes)) {
#assignments($nonNullAttributes)
   return this;
  }
#end

## Gerar os acessor para collections
#acessorsCollection

}